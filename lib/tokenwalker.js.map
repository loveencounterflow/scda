{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tokenwalker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require '../../../apps/icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = require './types'\n{ declare\n  defaults\n  isa\n  type_of\n  validate }              = types.export()\nCS                        = require 'coffeescript'\ndef                       = Object.defineProperty\n\n\n#===========================================================================================================\ndeclare 'tw_cfg', tests:\n  \"@isa.object x\":          ( x ) -> @isa.object x\n  \"@isa.cardinal x.lnr\":    ( x ) -> @isa.cardinal x.lnr\n  \"@isa.text x.source\":     ( x ) -> @isa.text x.source\n  \"@isa.boolean x.verbose\": ( x ) -> @isa.boolean x.verbose\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults.tw_cfg =\n  lnr:      0\n  verbose:  false\n\n#===========================================================================================================\nclass @Tokenwalker \n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg        = { defaults.tw_cfg..., cfg..., }\n    validate.tw_cfg @cfg\n    def @cfg, 'source',   enumerable: false, value: @cfg.source\n    def @,    'registry', enumerable: false, value: []\n    @collector  = null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  patterns: [\n    [ 'def',  /#(?<tnr>\\d+):property#\\d+:(?:=|:)#\\d+:(?:->|=>)#/,   ]\n    [ 'def',  /#(?<tnr>\\d+):property#\\d+:(?:=|:)#\\d+:param_start#/, ]\n    [ 'def',  /#(?<tnr>\\d+):identifier#\\d+:=#\\d+:(?:->|=>)#/,       ]\n    [ 'def',  /#(?<tnr>\\d+):identifier#\\d+:=#\\d+:param_start#/,     ]\n    [ 'call', /#(?<tnr>\\d+):property#\\d+:call_start#/,              ]\n    [ 'call', /#(?<tnr>\\d+):identifier#\\d+:call_start#/,            ]\n    ]\n\n  #-----------------------------------------------------------------------------------------------------------\n  match_tokenline: ( tokenline ) ->\n    # debug '^434324^', { tokenline, }\n    count = 0\n    debug '^345^', tokenline if @cfg.verbose\n    for [ role, pattern, ], pattern_idx in @patterns\n      continue unless ( match = tokenline.match pattern )?\n      count++\n      tnr     = parseInt match.groups.tnr, 10\n      d       = @registry[ tnr ]\n      d       = { d..., }\n      d.name  = d.text\n      d.role  = role\n      delete d.text\n      yield d\n    warn CND.reverse \" no match \" if @cfg.verbose and count is 0\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  register: ( d ) ->\n    @registry.push d\n    return @registry.length - 1\n\n  #-----------------------------------------------------------------------------------------------------------\n  push: ( d ) ->\n    tnr = @register d\n    ( @collector ?= [] ).push \"#{tnr}:#{d.type}\"\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  flush: ->\n    return null unless ( @collector?.length ? 0 ) > 0\n    tokenline = '#' + ( @collector.join '#' ) + '#'\n    yield from @match_tokenline tokenline\n    @collector = null\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  walk: ->\n    for [ type, text, d, ] in CS.tokens @cfg.source\n      # { range: [ 0, 1 ], first_line: 0, first_column: 0, last_line: 0, last_column: 0, last_line_exclusive: 0, last_column_exclusive: 1 }\n      lnr   = @cfg.lnr + d.first_line + 1\n      cnr   = d.first_column + 1\n      type  = type.toLowerCase()\n      switch type\n        when 'indent', 'outdent'\n          null\n        when 'terminator'\n          yield from @flush()\n        else\n          @push { lnr, cnr, type, text, }\n    yield from @flush()\n    return null\n\n\n\n"
  ]
}