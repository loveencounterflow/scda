{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,WAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,SAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,IADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B;;EAEA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,OAAF,EACE,QADF,EAEE,GAFF,EAGE,OAHF,EAIE,QAJF,CAAA,GAI4B,KAAK,CAAC,MAAN,CAAA,CAJ5B;;EAKA,CAAA,CAAE,WAAF,CAAA,GAA4B,OAAA,CAAQ,eAAR,CAA5B;;EACA,GAAA,GAA4B,MAAM,CAAC,eA5BnC;;;EAgCA,OAAA,CAAQ,QAAR,EAAkB;IAAA,KAAA,EAChB;MAAA,eAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAAxC;MACA,6BAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,MAArB;MAAT,CADxC;MAEA,sCAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,YAAY,CAAC,aAAd,CAA4B,CAAC,CAAC,MAA9B;MAAT,CAFxC;MAGA,0BAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAC,CAAC,YAAZ;MAAT,CAHxC;MAIA,2BAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAC,CAAC,aAAZ;MAAT,CAJxC;MAKA,0BAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAC,CAAC,YAAZ;MAAT,CALxC;MAMA,wBAAA,EAAwC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,OAAf;MAAT;IANxC;EADgB,CAAlB,EAhCA;;;EA0CA,QAAQ,CAAC,MAAT,GACE;IAAA,MAAA,EAAoB,MAApB;IACA,YAAA,EAAoB,EADpB;IAEA,aAAA,EAAoB,EAFpB;IAGA,OAAA,EAAoB,KAHpB;IAIA,YAAA,EAAoB;EAJpB,EA3CF;;;EAkDM,IAAC,CAAA,OAAP,MAAA,KAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,MAAA,EAAA,MAAA;;;MAEI,IAAC,CAAA,GAAD,GAAO,CAAE,GAAA,QAAQ,CAAC,MAAX,EAAsB,GAAA,GAAtB;MACP,QAAQ,CAAC,MAAT,CAAgB,IAAC,CAAA,GAAjB;MACA,CAAA,CAAE,MAAF,EACE,MADF,CAAA,GAC0B,GAD1B;MAEA,IAA0C,gBAAA,IAAY,CAAI,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAA1D;QAAA,MAAA,GAA0B,CAAA,CAAA,CAAG,MAAH,CAAA,CAAA,EAA1B;OANJ;;;MASI,IAAC,CAAA,YAAD,GAA0B,IAAI,CAAC,IAAL,CAAU,MAAV,EAAkB,UAAlB;MAC1B,IAAC,CAAA,GAAG,CAAC,YAAL,GAA0B,IAAI,GAAJ,CAAQ,IAAC,CAAA,GAAG,CAAC,YAAb;MAC1B,IAAC,CAAA,GAAG,CAAC,aAAL,GAAqB,IAAI,GAAJ,CAAQ,IAAC,CAAA,GAAG,CAAC,aAAb;MACrB,IAAC,CAAA,GAAD,GAA0B,MAAA,CAAO,CAAE,GAAA,IAAC,CAAA,GAAH,EAAW,MAAX,EAAmB,MAAnB,CAAP;MAC1B,GAAA,CAAI,IAAJ,EAAO,KAAP,EAAc;QAAA,UAAA,EAAY,KAAZ;QAAmB,KAAA,EAAO,IAAI,GAAJ,CAAA;MAA1B,CAAd;MACA,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU;QAAE,MAAF;QAAU,GAAA,EAAK;MAAf,CAAV;MACA,IAAC,CAAA,SAAD,GAA0B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,MAAnB;MAC1B,IAAC,CAAA,OAAD,CAAA,EAhBJ;;AAkBI,aAAO;IAnBI,CADf;;;IAuBE,OAAS,CAAA,CAAA,EAAA;;;MAGP,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAA;aAAA,CAAA,CAEI,IAAC,CAAA,SAFL,CAAA;;;;aAAA,CAAA,CAMI,IAAC,CAAA,SANL,CAAA;;;;aAAA,CAAA,CAUI,IAAC,CAAA,SAVL,CAAA;;;;;;;oCAAA,CAAb,EAFJ;;;;;;;;;;;;aAgCI,IAAC,CAAA,iBAAD,CAAA;IAjCO,CAvBX;;;IA2DE,iBAAmB,CAAA,CAAA;AACrB,UAAA,cAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,cAAA,EAAA;AAAI;MAAA,KAAA,iDAAA;;QACE,IAAgB,yDAAhB;AAAA,mBAAA;;QACA,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,CAAA,YAAA,CAAA,CACO,IAAC,CAAA,SADR,CAAA;8CAAA,CAAT,EAGE,CAAE,cAAF,EAAkB,cAAlB,CAHF;MAFF;AAMA,aAAO;IAPU,CA3DrB;;;IAqEE,QAAU,CAAE,GAAF,CAAA;AACZ,UAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,CAAA,GAAc,GAAd;MACA,IAA0C,yBAAA,IAAiB,IAAI,CAAC,UAAL,CAAgB,IAAC,CAAA,GAAG,CAAC,MAArB,CAA3D;QAAA,KAAA,GAAS,IAAI,+BAAb;;MACA,IAAe,IAAC,CAAA,GAAG,CAAC,aAAa,CAAC,GAAnB,CAAuB,KAAvB,CAAf;AAAA,eAAO,KAAP;;MACA,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,CAAA,YAAA,CAAA,CACO,IAAC,CAAA,SADR,CAAA,gDAAA,CAAT,EAEE,CAAE,KAAF,EAAS,IAAT,CAFF;AAGA,aAAO;IAPC,CArEZ;;;;;;;;;;;;;;;IA2FE,cAAgB,CAAE,GAAF,CAAA,EAAA;;;;AAClB,UAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA;MAGI,CAAA,CAAE,KAAF,EACE,GADF,EAEE,GAFF,EAGE,IAHF,EAIE,IAJF,EAKE,IALF,CAAA,GAKW,GALX;MAMA,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,CAAA,YAAA,CAAA,CACO,IAAC,CAAA,SADR,CAAA;qDAAA,CAAT,EAGE,CAAE,KAAF,EAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAHF;AAIA,aAAO;IAdO,CA3FlB;;;IA4GE,WAAa,CAAA,CAAA;aAAG,IAAC,CAAA,yBAAD,CAAA;IAAH,CA5Gf;;;IA+GE,yBAA2B,CAAA,CAAA;AAC7B,UAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,KAAA,EAAA,WAAA,EAAA;MAAI,YAAA,GAAgB,IAAI,CAAC,IAAL,CAAU,IAAC,CAAA,YAAX,EAApB;;MAEI,KAAA,8CAAA;;QACE,KAAA,GAAS,IAAC,CAAA,QAAD,CAAU,CAAE,IAAF,CAAV;QACT,IAAgB,aAAhB;AAAA,mBAAA;;QACA,KAAA,CAAM,QAAN,EAAgB,IAAhB;QACA,SAAA,GAAc,IAAI,SAAJ,CAAc,IAAd;QACd,SAAA,GAAc,EAJpB;;AAMM,eAAM,CAAE,IAAA,GAAO,SAAS,CAAC,IAAV,CAAA,CAAT,CAAA,KAAiC,KAAvC;UACE,SAAA;UACA,IAAA,GAAO,IAAI,CAAC,QAAL,CAAc,OAAd;UAEP,IAAY,OAAO,CAAC,IAAR,CAAa,IAAb,CAAZ;;AAAA,qBAAA;;UACA,IAAY,OAAO,CAAC,IAAR,CAAa,IAAb,CAAZ;AAAA,qBAAA;WAJR;;UAMQ,WAAA,GAAc,IAAI,WAAJ,CAAgB;YAAE,GAAA,EAAK,SAAP;YAAkB,MAAA,EAAQ,IAA1B;YAAgC,OAAA,EAAS,IAAC,CAAA,GAAG,CAAC;UAA9C,CAAhB;AAGd;AACE;;;YAAA,KAAA,QAAA,GAAA;;cAEE,CAAA,CAAE,GAAF,EACE,GADF,EAEE,IAFF,EAGE,IAHF,EAIE,IAJF,CAAA,GAIW,CAJX;cAKA,IAAY,IAAC,CAAC,GAAG,CAAC,YAAY,CAAC,GAAnB,CAAuB,IAAvB,CAAZ;AAAA,yBAAA;;cACA,IAAC,CAAA,cAAD,CAAgB,CAAE,KAAF,EAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAAhB;YARF,CADF;WAWA,cAAA;;YAAM,eACd;;;;;YAGU,IAAG,CAAE,KAAK,CAAC,IAAN,KAAc,aAAhB,CAAA,IAED,CAAE,KAAK,CAAC,IAAN,KAAc,WAAd,IAA8B,KAAK,CAAC,OAAN,KAAiB,2DAAjD,CAFF;;cAIE,IAAA,CAAK,CAAA,qBAAA,CAAA,CAAwB,GAAxB,CAAA,IAAA,CAAA,CAAkC,KAAlC,CAAA,0BAAA,CAAA,CAAoE,GAAA,CAAI,IAAJ,CAApE,CAAA,CAAL;AACA,uBALF;;YAMA,MAAM,MAVR;;QArBF;MAPF,CAFJ;;AA0CI,aAAO;IA3CkB;;EAjH7B;AAlDA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SCDA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ Dba }                   = require 'icql-dba'\nReadlines                 = require 'n-readlines'\nglob                      = require 'glob'\n{ freeze\n  lets }                  = require 'letsfreezethat'\ntypes                     = require './types'\n{ declare\n  defaults\n  isa\n  type_of\n  validate }              = types.export()\n{ Tokenwalker }           = require './tokenwalker'\ndef                       = Object.defineProperty\n\n\n#===========================================================================================================\ndeclare 'sc_cfg', tests:\n  \"@isa.object x\":                        ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.schema\":          ( x ) -> @isa.nonempty_text x.schema\n  \"@isa_optional.nonempty_text x.prefix\": ( x ) -> @isa_optional.nonempty_text x.prefix\n  \"@isa.list x.ignore_names\":             ( x ) -> @isa.list x.ignore_names\n  \"@isa.list x.ignore_spaths\":            ( x ) -> @isa.list x.ignore_spaths\n  \"@isa.list x.dependencies\":             ( x ) -> @isa.list x.dependencies\n  \"@isa.boolean x.verbose\":               ( x ) -> @isa.boolean x.verbose\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults.sc_cfg =\n  schema:             'scda'\n  ignore_names:       []\n  ignore_spaths:      []\n  verbose:            false\n  dependencies:       []\n\n#===========================================================================================================\nclass @Scda\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    ### TAINT add validation, defaults ###\n    @cfg = { defaults.sc_cfg..., cfg..., }\n    validate.sc_cfg @cfg\n    { schema\n      prefix }              = cfg\n    prefix                  = \"#{prefix}/\" if prefix? and not prefix.endsWith '/'\n    ### TAINT make globbing configurable ###\n    ### TAINT allow to pass in list of paths ###\n    @_source_glob           = PATH.join prefix, '*.coffee'\n    @cfg.ignore_names       = new Set @cfg.ignore_names\n    @cfg.ignore_spaths = new Set @cfg.ignore_spaths\n    @cfg                    = freeze { @cfg..., schema, prefix, }\n    def @, 'dba', enumerable: false, value: new Dba()\n    @dba.open { schema, ram: true, }\n    @_schema_i              = @dba.as_identifier schema\n    @init_db()\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  init_db: ->\n    ### TAINT spath might not be unique ###\n    ### TAINT use mirage schema with VNRs, refs ###\n    @dba.execute \"\"\"\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{@_schema_i}.paths (\n          spath       text unique not null primary key,\n          path        text unique not null );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{@_schema_i}.dependencies (\n          provider_spath  text unique not null primary key,\n          consumer_spath  text unique not null );\n      -- ---------------------------------------------------------------------------------------------------\n      create table #{@_schema_i}.occurrences (\n          spath       text    not null,\n          lnr         integer not null,\n          cnr         integer not null,\n          type        text not null,\n          role        text not null,\n          name        text not null,\n        primary key ( spath, lnr, cnr ) );\n      \"\"\"\n      # -- ---------------------------------------------------------------------------------------------------\n      # create table #{@_schema_i}.directories (\n      #     id          integer primary key,\n      #     path        text unique not null );\n      # -- ---------------------------------------------------------------------------------------------------\n      # create table #{@_schema_i}.lines (\n      #     spath  text    not null,\n      #     lnr         integer not null,\n      #     line        text    not null,\n      #   primary key ( spath, lnr ) );\n    #.......................................................................................................\n    @_add_dependencies()\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_dependencies: ->\n    for provider_spath, idx in @cfg.dependencies\n      continue unless ( consumer_spath = @cfg.dependencies[ idx + 1 ] )?\n      @dba.run \"\"\"\n        insert into #{@_schema_i}.dependencies ( provider_spath, consumer_spath )\n          values ( $provider_spath, $consumer_spath );\"\"\", \\\n        { provider_spath, consumer_spath, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_path: ( cfg ) ->\n    { path, }   = cfg\n    spath  = path[ @cfg.prefix.length... ] if @cfg.prefix? and path.startsWith @cfg.prefix\n    return null if @cfg.ignore_spaths.has spath\n    @dba.run \"\"\"\n      insert into #{@_schema_i}.paths ( spath, path ) values ( $spath, $path );\"\"\", \\\n      { spath, path, }\n    return spath\n\n  # #---------------------------------------------------------------------------------------------------------\n  # $add_line: ( cfg ) ->\n  #   ### TAINT spath might not be unique ###\n  #   { spath\n  #     lnr\n  #     line } = cfg\n  #   @dba.run \"\"\"\n  #     insert into #{@_schema_i}.lines ( spath, lnr, line )\n  #       values ( $spath, $lnr, $line );\"\"\", \\\n  #     { spath, lnr, line, }\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_occurrence: ( cfg ) ->\n    ### TAINT spath might not be unique ###\n    ### TAINT code duplication ###\n    ### TAINT use prepared statement ###\n    { spath\n      lnr\n      cnr\n      type\n      role\n      name } = cfg\n    @dba.run \"\"\"\n      insert into #{@_schema_i}.occurrences ( spath, lnr, cnr, type, role, name )\n        values ( $spath, $lnr, $cnr, $type, $role, $name );\"\"\", \\\n      { spath, lnr, cnr, type, role, name, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_sources: -> @_add_sources_line_by_line()\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_sources_line_by_line: ->\n    source_paths  = glob.sync @_source_glob\n    #.......................................................................................................\n    for path in source_paths\n      spath  = @add_path { path, }\n      continue unless spath?\n      debug '^4445^', path\n      readlines   = new Readlines path\n      outer_lnr   = 0\n      #.....................................................................................................\n      while ( line = readlines.next() ) isnt false\n        outer_lnr++\n        line = line.toString 'utf-8'\n        #...................................................................................................\n        continue if /^\\s*$/.test line # exclude blank lines\n        continue if /^\\s*#/.test line # exclude some comments\n        # @$add_line { spath, lnr, line, }\n        tokenwalker = new Tokenwalker { lnr: outer_lnr, source: line, verbose: @cfg.verbose, }\n        # debug '^4433^', tokenwalker\n        #...................................................................................................\n        try\n          for d from tokenwalker.walk()\n            # debug '^33343^', d\n            { lnr\n              cnr\n              type\n              name\n              role } = d\n            continue if @.cfg.ignore_names.has name\n            @add_occurrence { spath, lnr, cnr, type, role, name, }\n        #...................................................................................................\n        catch error\n          # debug '^42342^', error.name\n          # debug '^42342^', error.code\n          # debug '^42342^', error.message\n          if ( error.name is 'SyntaxError' ) or \\\n            ### TAINT this is a bug in CS tokenizer, can't deal with line `.pipe ...` without prior context ###\n            ( error.name is 'TypeError' and error.message is \"Cannot set property 'continuationLineIndent' of undefined\" )\n            ### TAINT add to table `errors` or similar ###\n            warn \"^4476^ skipping line #{lnr} of #{spath} because of syntax error: #{rpr line}\"\n            continue\n          throw error\n    #.......................................................................................................\n    return null\n\n\n\n\n\n"
  ]
}